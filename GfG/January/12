class Solution {
    public int maxWater(int arr[]) {
        // Edge case: Null or empty array
        if (arr == null || arr.length == 0) {
            return 0;
        }

        int n = arr.length;
        int[] lmax = new int[n];
        int[] rmax = new int[n];
        int trapwater = 0;

        // Calculate left max for each position
        lmax[0] = arr[0];
        for (int i = 1; i < n; i++) {
            lmax[i] = Math.max(lmax[i - 1], arr[i]);
        }

        // Calculate right max for each position
        rmax[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rmax[i] = Math.max(rmax[i + 1], arr[i]);
        }

        // Calculate trapped water
        for (int i = 0; i < n; i++) {
            trapwater += Math.min(lmax[i], rmax[i]) - arr[i];
        }

        return trapwater;
    }

    
}
